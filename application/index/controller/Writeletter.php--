<?php
namespace app\index\controller;
use app\common\controller\HomeBase;
use app\index\model\WriteLetter as WriteLetterModel;
use think\Db;
use think\Session;
use think\Request;
use think\Config;

/**
 * 写律师函与修改律师函
 * Class WriteLetter
 * @package app\index\controller
 */
class Writeletter extends HomeBase{
    protected $writemodel;
    public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
        $this->writemodel = new WriteLetterModel();
    }

    /*
     * 查询写信的展示信息
     * */
    public function getLetterList(){
        if(Request::instance()->isPost()){
            //type发函类型
            $type = $this->request->param('type');
            $uid = $this->request->param('uid');
            $token =Request::instance()->header('token');
            $phone = getOneUserVal(['id'=>$uid],'mobile');
            $v = validateUser('token',$phone,$token);
            if($v>0){
                jsonSend(0,'验证失败');exit;
            }
            if($phone){
                $res =  $this->writemodel->getLetter([$uid,$type]);
                jsonSend(1,'数据获取成功',$res);
            }else{
                jsonSend(0,'该用户不存在');
            }
        }else{
            jsonSend(0,'请求错误');
        }
    }
    /*
     * 更新或者新建新的写信内容
     * uid用户的id
     * 传递参数：send_type 0个人发函或 1是企业发函
     * content 需求描述
     * 更新的话需要把订单号传过来  没有订单号就直接新建
     * */
    public function writeLetter(){
        if(Request::instance()->isPost()){
            $params = Request::instance()->param();
            $token =Request::instance()->header('token');
            $phone = getOneUserVal(['id'=>$params['uid']],'mobile');
            $v = validateUser('token',$phone,$token);
            if($v>0){
                jsonSend(3,'验证失败');exit;
            }
            array_key_exists('order_number',$params) ? $type = 'update' : $type = 'add';
            $num = searchOrderNum($params['uid']);
            if($type =='add') {
                if ($num >= 3) {
                    jsonSend(0, '你已存在3个未完成订单', ['num' => $num, 'userId' => $params['uid']]);
                    exit;
                }
            }
            if(!empty($params['content'])){
                $blackValidate = blackListValidate($params['content']);
                if(count($blackValidate)>0){  jsonSend(0,'描述中存在敏感词汇，请修改');exit;}
            }else{
                jsonSend(0,'请填写描述内容');exit;
            }
            $order = $this->writemodel->writeSaveUpdate($params,$type);
            if($order){
                jsonSend(1,'保存成功',['order_number'=>$order,'userId'=>$params['uid'],'is_complete'=>0,'num'=>$num]);
            }else{
                jsonSend(0,'保存失败');
            }
        }else{
            jsonSend(0,'请求类型错误');
        }
    }

    /*
     * 地址填写与更新
     *
     * */
    public function writeAddress(){
        if(Request::instance()->isPost()){
           // 返回数据  订单号 等等的信息  uid  不用传手机号就可以
            $param = Request::instance()->param();
            $token =Request::instance()->header('token');
            if(!array_key_exists('order_number',$param)){jsonSend(0,'缺少订单号',['uid'=>$param['uid']]);exit;}
            if(!array_key_exists('real_auth',$param)){jsonSend(0,'请先进行实名认证',['uid'=>$param['uid']]);exit;}
            $phone = getOneUserVal(['id'=>$param['uid'],'mobile']);
            $v = validateUser('token',$phone,$token);
            if($v>0){
                jsonSend(3,'验证失败');exit;
            }
            //首先查找是否存在这个订单号
            $order = searchSingalVal('os_address','order_number',['order_number'=>$param['order_number'],'uid'=>$param['uid']]);
            $order ? $type='update' : $type='add';
            $order = $this->writemodel->writeAddress($param,$type);
            if($order) jsonSend(1,'提交成功');
        }else{
            jsonSend(0,'非法请求');
        }
    }
    /*
     * 支付时信息查询  商户号的id等信息
     * */
    public function getPayInfo(){
        //需要提交参数：type 0微信  1支付宝
        if(Request::instance()->isGet()){
            $type=Request::instance()->param('type');
            switch($type){
                case 0://微信
                    $data=[
                        config::get('wx_appid'),

                    ];
                    break;
                case 1://支付宝
                    $data=[
                        config::get('zfb_appid'),

                    ];
                    break;
            }
            jsonSend(1,'请求成功',$data);
        }else{
            jsonSend(0,'请求类型错误');
        }
    }
    /*
     * 邮戳的提醒信息
     * @param 需要传输uid和order_number,token三个参数
     * */
    public function getMarkMessage(){
        if(Request::instance()->isGet()){
            $param = Request::instance()->param();
            $token = Request::instance()->header('token');
            $phone = getOneUserVal(['id'=>$param['uid'],'mobile']);
            $v = validateUser('token',$phone,$token);
            if($v>0){
                jsonSend(3,'验证失败');exit;
            }
            $content = Db::table('os_message')->where(['order_number'=>$param['order_number'],'uid'=>$param['uid'],'send_type'=>1])->value('content');
            jsonSend(1,'获取成功',['message'=>$content,'order_number'=>$param['order_number'],'times'=>1,'is_complete'=>0]);

        }else{
            jsonSend(0,'请求类型错误');exit;
        }
    }
    /**
     *提交邮戳的补充资料
     * @param 资料的集合  和  uid 和  order_number 和token 和is_have用户是否有资料进行补充  0没有资料 1补充完毕
     * */
    public function submitFile(){
        if(Request::instance()->isPost()){
            $param = Request::instance()->param();
            $token = Request::instance()->header('token');
            $phone = getOneUserVal(['id'=>$param['uid'],'mobile']);
            $v = validateUser('token',$phone,$token);
            if($v>0){
                jsonSend(3,'验证失败');exit;
            }
            $t =Db::table('os_order_list')->where(['uid'=>$param['uid'],'order_number'=>$param['order_number']])->value('times');
            if($t ==2){
                jsonSend(0,'已没有修改机会',['order_number'=>$param['order_number'],'uid'=>$param['uid'],'times'=>2]);exit;
            }
            $arr=['times'=>2,'is_have'=>$param['is_have'],'updatetime'=>config::get('dateTime')];//信息描述保存
            switch($param['is_have']){
                case 0:
                    //循环把资料弄到表中去
                    $arr['replenish_content']=$param['replenish_content'];
                    break;
                case 1:
                    break;
            }

            Db::name('order_list')->where(['uid'=>$param['uid'],'order_number'=>$param['order_number']])->update($arr);//更新是否资料补充情况
            jsonSend(1,'更新成功',['order_number'=>$param['order_number'],'uid'=>$param['uid'],'times'=>2]);
        }else{
            jsonSend(0,'请求类型错误');exit;
        }
    }

    /**
     *提交邮戳的的修改意见
     * @param message修改意见  和  uid 和  order_number 和token   is_issue是否有意见  0有意见  1没意见确认发函
     * */
    public function postMarkIdea(){
        if(Request::instance()->isPost()){
            $param = Request::instance()->param();
            $token = Request::instance()->header('token');
            $phone = getOneUserVal(['id'=>$param['uid'],'mobile']);
            $v = validateUser('token',$phone,$token);
            if($v>0){
                jsonSend(3,'验证失败');exit;
            }
            $res= $this->writemodel->postMarkIdea($param);
            jsonSend(1,'获取成功',$res);
        }else{
            jsonSend(0,'请求类型错误');exit;
        }
    }

    /**
     * 签名
    **/


}